/home/southatoms/Escritorio/develop/personal/grappling-gear/src/App.tsx

Contenido:
import React, { Suspense, lazy } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Header from './components/Header';
import ThemeToggle from './components/ThemeToggle';
import NotificationContainer from './components/NotificationContainer';

// Carga perezosa de componentes
const Home = lazy(() => import('./pages/Home'));
const ProductsAdvanced = lazy(() => import('./pages/ProductsAdvanced'));
const ProductDetail = lazy(() => import('./pages/ProductDetail'));
const Cart = lazy(() => import('./components/Cart'));
const Checkout = lazy(() => import('./components/Checkout'));
const Contactanos = lazy(() => import('./pages/Contactanos'));

const App: React.FC = () => {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <BrowserRouter>
        <Header />
        <ThemeToggle />
        <NotificationContainer />
        <div className="main-content">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/productos" element={<ProductsAdvanced />} />
            <Route path="/producto/:id" element={<ProductDetail />} />
            <Route path="/carrito" element={<Cart />} />
            <Route path="/checkout" element={<Checkout />} />
            <Route path="/contactanos" element={<Contactanos />} />
          </Routes>
        </div>
      </BrowserRouter>
    </Suspense>
  );
};

export default App;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/main.tsx

Contenido:
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Provider } from 'react-redux';
import store from './store';
import { CartProvider } from './context/CartContext';
import { InventoryProvider } from './context/InventoryContext';
import { NotificationProvider } from './context/NotificationContext';
import './scss/main.scss';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Provider store={store}> {/* Proveedor de Redux */}
      <InventoryProvider> {/* Proveedor de Inventario */}
        <CartProvider> {/* Proveedor de Carrito */}
          <NotificationProvider> {/* Proveedor de Notificaciones */}
            <App />
          </NotificationProvider>
        </CartProvider>
      </InventoryProvider>
    </Provider>
  </React.StrictMode>
);


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/vite-env.d.ts

Contenido:
/// <reference types="vite/client" />


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/pages/ProductsAdvanced.tsx

Contenido:
// src/pages/ProductsAdvanced.tsx
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Product } from '../types/product';
import ProductCard from '../components/ProductCard';
import { loadProducts } from '../store';  // Acción para cargar productos
import productsData from '../components/products.json';  // Los datos de los productos

const ProductsAdvanced: React.FC = () => {
  const dispatch = useDispatch();
  const products: Product[] = useSelector((state: any) => state.products.products || []);  // Asegurándonos de que sea un array vacío si no hay productos aún

  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortOption, setSortOption] = useState('default');

  useEffect(() => {
    if (products.length === 0) {
      dispatch(loadProducts(productsData.products));  // Despachar la acción para cargar los productos
    }
  }, [dispatch, products.length]);

  const categories = Array.from(new Set(products.map(product => product.category)));

  let filteredProducts = products.filter(product => {
    const matchesCategory = selectedCategory ? product.category === selectedCategory : true;
    const matchesSearch =
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  if (sortOption === 'priceAsc') {
    filteredProducts = [...filteredProducts].sort((a, b) => a.price - b.price);
  } else if (sortOption === 'priceDesc') {
    filteredProducts = [...filteredProducts].sort((a, b) => b.price - a.price);
  } else if (sortOption === 'nameAsc') {
    filteredProducts = [...filteredProducts].sort((a, b) => a.name.localeCompare(b.name));
  } else if (sortOption === 'nameDesc') {
    filteredProducts = [...filteredProducts].sort((a, b) => b.name.localeCompare(a.name));
  }

  return (
    <div className="products-advanced">
      <aside className="sidebar">
        <h3>Filtrar</h3>
        <div className="filter-section">
          <label>Categorías</label>
          <ul>
            <li onClick={() => setSelectedCategory('')} className={!selectedCategory ? 'active' : ''}>
              Todos
            </li>
            {categories.map(cat => (
              <li key={cat} onClick={() => setSelectedCategory(cat)} className={selectedCategory === cat ? 'active' : ''}>
                {cat}
              </li>
            ))}
          </ul>
        </div>
        <div className="filter-section">
          <label>Buscar</label>
          <input
            type="text"
            placeholder="Buscar productos..."
            value={searchQuery}
            onChange={e => setSearchQuery(e.target.value)}
          />
        </div>
        <div className="filter-section">
          <label>Ordenar por</label>
          <select value={sortOption} onChange={e => setSortOption(e.target.value)}>
            <option value="default">Relevancia</option>
            <option value="priceAsc">Precio: menor a mayor</option>
            <option value="priceDesc">Precio: mayor a menor</option>
            <option value="nameAsc">Nombre: A-Z</option>
            <option value="nameDesc">Nombre: Z-A</option>
          </select>
        </div>
      </aside>
      <main className="products-grid">
        {filteredProducts.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </main>
    </div>
  );
};

export default ProductsAdvanced;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/pages/Home.tsx

Contenido:
// src/pages/Home.tsx
import React from 'react';
import Hero from '../components/Hero';
import ProductGrid from '../components/ProductGrid';
import Footer from '../components/Footer';
import productsData from '../components/products.json'; // Importar los productos

const Home: React.FC = () => {
  // Filtrar los productos nuevos
  const newProducts = productsData.products.filter(product => product.landing);

  // Extraer solo las imágenes para el carrusel
  const newProductImages = newProducts.flatMap(product => product.images[0]);

  return (
    <div className="home">
      <Hero images={newProductImages} />
      <ProductGrid />
      <Footer />
    </div>
  );
};

export default Home;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/pages/Products.tsx

Contenido:
// src/pages/Products.tsx
import React from 'react';
import ProductList from '../components/ProductList';

const Products: React.FC = () => {
  return (
    <div className="products">
      <h2>Productos</h2>
      <ProductList />
    </div>
  );
};

export default Products;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/pages/Contactanos.tsx

Contenido:
// src/pages/Contactanos.tsx
import React, { useState } from 'react';
import '../scss/components/_contactanos.scss'; // Asegúrate de tener los estilos correspondientes

const Contactanos: React.FC = () => {
  const [formData, setFormData] = useState({
    nombre: '',
    email: '',
    telefono: '',
    asunto: '',
    mensaje: '',
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Validación básica: asegúrate de que los campos obligatorios estén completos
    if (!formData.nombre || !formData.email || !formData.mensaje) {
      alert("Por favor, completa los campos obligatorios.");
      return;
    }
    // Aquí implementarías la lógica para enviar el mensaje a tu backend o servicio de correo
    console.log("Mensaje enviado:", formData);
    alert("Tu mensaje ha sido enviado. Nos pondremos en contacto contigo a la brevedad.");
    setFormData({
      nombre: '',
      email: '',
      telefono: '',
      asunto: '',
      mensaje: '',
    });
  };

  return (
    <div className="contactanos">
      <h2>Contáctanos</h2>
      <p>
        ¿Tienes alguna consulta o necesitas más información? Completa el siguiente formulario y nos pondremos en contacto contigo.
      </p>
      <form className="contactanos__form" onSubmit={handleSubmit}>
        <div className="contactanos__form-group">
          <label htmlFor="nombre">Nombre Completo *</label>
          <input
            type="text"
            id="nombre"
            name="nombre"
            value={formData.nombre}
            onChange={handleChange}
            required
          />
        </div>
        <div className="contactanos__form-group">
          <label htmlFor="email">Correo Electrónico *</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        <div className="contactanos__form-group">
          <label htmlFor="telefono">Teléfono</label>
          <input
            type="tel"
            id="telefono"
            name="telefono"
            value={formData.telefono}
            onChange={handleChange}
          />
        </div>
        <div className="contactanos__form-group">
          <label htmlFor="asunto">Asunto</label>
          <input
            type="text"
            id="asunto"
            name="asunto"
            value={formData.asunto}
            onChange={handleChange}
          />
        </div>
        <div className="contactanos__form-group">
          <label htmlFor="mensaje">Mensaje *</label>
          <textarea
            id="mensaje"
            name="mensaje"
            rows={5}
            value={formData.mensaje}
            onChange={handleChange}
            required
          />
        </div>
        <button type="submit" className="btn contactanos__submit">
          Enviar Mensaje
        </button>
      </form>
      <div className="contactanos__info">
        <h3>Información de Contacto</h3>
        <p>
          <strong>Teléfono:</strong> (123) 456-7890
        </p>
        <p>
          <strong>Email:</strong> info@grapplinggear.com
        </p>
        <p>
          <strong>Dirección:</strong> Calle Falsa 123, Ciudad, País
        </p>
      </div>
    </div>
  );
};

export default Contactanos;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/pages/ProductDetail.tsx

Contenido:
// src/pages/ProductDetail.tsx
import React, { useState, useEffect, useContext } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { Product } from '../types/product';
import FullZoomImage from '../components/FullZoomImage';
import { CartContext } from '../context/CartContext';
import { InventoryContext } from '../context/InventoryContext';
import { useNotification } from '../context/NotificationContext';
import { loadProducts } from '../store'; // Cambié esto de fetchProducts a loadProducts

const ProductDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const dispatch = useDispatch();

  // Get products from Redux state, or use default empty array
  const products: Product[] = useSelector((state: any) => state.products.products || []);
  
  // Find the specific product by ID
  const product = products.find(item => item.id.toString() === id);

  const { addToCart } = useContext(CartContext);
  const { checkStock } = useContext(InventoryContext);
  const { showNotification } = useNotification();

  const [selectedImage, setSelectedImage] = useState(product?.images[0] || '');
  const [selectedSize, setSelectedSize] = useState<string>('');

  // Fetch products if not in Redux state
  useEffect(() => {
    if (!products.length) {
      dispatch(loadProducts(productsData.products)); // Usar loadProducts para cargar productos
    }
  }, [dispatch, products.length]);

  if (!product) {
    return <div className="product-detail__notfound">Producto no encontrado</div>;
  }

  const availableStock = selectedSize ? checkStock(product.id, selectedSize) : 0;

  const handleAddToCart = () => {
    if (!selectedSize) {
      showNotification("Por favor, selecciona un talle.", "error");
      return;
    }
    if (availableStock < 1) {
      showNotification("Lo sentimos, no hay stock disponible para el talle seleccionado.", "error");
      return;
    }
    addToCart({ product, quantity: 1, size: selectedSize });
    showNotification("Agregado al carrito.", "success");
  };

  const formatPrice = (price: number) => {
    return `$${price.toLocaleString('es-AR')}`; // Utiliza 'es-AR' para formato con separadores de miles
  };

  return (
    <div className="product-detail">
      <div className="product-detail__container">
        <div className="product-detail__viewer">
          <FullZoomImage
            src={selectedImage}
            alt={product.name}
            thumbnailWidth={500}
            thumbnailHeight={400}
          />
        </div>
        <div className="product-detail__info">
          <h2 className="product-detail__title">{product.name}</h2>
          <p className="product-detail__description">{product.description}</p>
          <p className="product-detail__price">{formatPrice(product.price)}</p>
          <div className="product-detail__extra">
            <div className="product-detail__sizes">
              <h3 className="product-detail__subtitle">Talles Disponibles</h3>
              <ul className="product-detail__size-list">
                {product.availableSizes.map((size, index) => (
                  <li 
                    key={index} 
                    className={`product-detail__size-item ${selectedSize === size ? 'selected' : ''}`}
                    onClick={() => setSelectedSize(size)}
                  >
                    {size}
                  </li>
                ))}
              </ul>
            </div>
          </div>
          <button 
            className="btn product-detail__add-to-cart"
            onClick={handleAddToCart}
            disabled={!selectedSize || availableStock < 1}
          >
            Añadir al Carrito
          </button>
        </div>
      </div>
      <div className="product-detail__gallery">
        {product.images.map((img, index) => (
          <img
            key={index}
            src={img}
            alt={`${product.name} ${index + 1}`}
            className={`product-detail__thumb ${selectedImage === img ? 'selected' : ''}`}
            onClick={() => setSelectedImage(img)}
          />
        ))}
      </div>
    </div>
  );
};

export default ProductDetail;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/store/index.ts

Contenido:
// src/store/index.ts
import { createStore, combineReducers } from 'redux';
import { Product } from '../types/product';
import prods from '../components/products.json';

// Definir las interfaces para el estado del carrito y productos
interface CartItem {
  id: number;
  quantity: number;
  size: string;
}

interface CartState {
  cart: CartItem[];
}

interface ProductsState {
  products: Product[];
}

// Estado inicial de los productos
const initialProductsState: ProductsState = {
  products: [],
};

// Estado inicial del carrito
const initialCartState: CartState = {
  cart: [],
};

// Acciones para el carrito
export const ADD_TO_CART = 'ADD_TO_CART';
export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';
export const LOAD_PRODUCTS = 'LOAD_PRODUCTS'; // Acción para cargar productos

export interface AddToCartAction {
  type: typeof ADD_TO_CART;
  payload: Product[];
}

interface RemoveFromCartAction {
  type: typeof REMOVE_FROM_CART;
  payload: { id: number };
}

interface LoadProductsAction {
  type: typeof LOAD_PRODUCTS;
  payload: Product[]; // Carga los productos
}

type ProductsAction = LoadProductsAction; // Solo necesitamos esta acción aquí

type CartAction = AddToCartAction | RemoveFromCartAction;

// Reducer de productos
const productsReducer = (state = initialProductsState, action: ProductsAction): ProductsState => {
  switch (action.type) {
    case LOAD_PRODUCTS:
      return {
        ...state,
        products: action.payload,
      };
    default:
      return state;
  }
};

// Reducer del carrito
const cartReducer = (state = initialCartState, action: CartAction): CartState => {
  switch (action.type) {
    case ADD_TO_CART:
      return {
        ...state,
        cart: [...state.cart, ...action.payload.map(product => ({
          id: product.id,
          quantity: 1,
          size: '',
        }))],
      };
    case REMOVE_FROM_CART:
      return {
        ...state,
        cart: state.cart.filter(item => item.id !== action.payload.id),
      };
    default:
      return state;
  }
};

// Combine reducers
const rootReducer = combineReducers({
  products: productsReducer,
  cart: cartReducer,
});

// Crear el store
const store = createStore(rootReducer);

export default store;

// Nueva acción para cargar productos
export const loadProducts = (products: Product[]) => ({
  type: LOAD_PRODUCTS,
  payload: products,
});



--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/CategoryFilter.tsx

Contenido:
// src/components/CategoryFilter.tsx
import React from 'react';

interface CategoryFilterProps {
  categories: string[];
  selectedCategory: string;
  onSelectCategory: (category: string) => void;
}

const CategoryFilter: React.FC<CategoryFilterProps> = ({ categories, selectedCategory, onSelectCategory }) => {
  return (
    <div className="category-filter">
      <button 
        onClick={() => onSelectCategory('')}
        className={!selectedCategory ? 'active' : ''}
      >
        Todos
      </button>
      {categories.map(category => (
        <button 
          key={category}
          onClick={() => onSelectCategory(category)}
          className={selectedCategory === category ? 'active' : ''}
        >
          {category}
        </button>
      ))}
    </div>
  );
};

export default CategoryFilter;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/ProductList.tsx

Contenido:
// src/components/ProductList.tsx
import React, { useState } from 'react';
import ProductCard from './ProductCard';
import { Product } from '../types/product';
import productsData from './products.json';
import CategoryFilter from './CategoryFilter';

const ProductList: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortOption, setSortOption] = useState('default');

  const products: Product[] = productsData.products;

  // Obtén la lista única de categorías
  const categories = Array.from(new Set(products.map(product => product.category)));

  // Filtra los productos según categoría y búsqueda
  let filteredProducts = products.filter(product => {
    const matchesCategory = selectedCategory ? product.category === selectedCategory : true;
    const matchesSearch =
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  // Ordena los productos según la opción seleccionada
  if (sortOption === 'priceAsc') {
    filteredProducts = [...filteredProducts].sort((a, b) => a.price - b.price);
  } else if (sortOption === 'priceDesc') {
    filteredProducts = [...filteredProducts].sort((a, b) => b.price - a.price);
  } else if (sortOption === 'nameAsc') {
    filteredProducts = [...filteredProducts].sort((a, b) => a.name.localeCompare(b.name));
  } else if (sortOption === 'nameDesc') {
    filteredProducts = [...filteredProducts].sort((a, b) => b.name.localeCompare(a.name));
  }

  return (
    <div className="product-list">
      <div className="product-list__controls">
        <CategoryFilter 
          categories={categories} 
          selectedCategory={selectedCategory} 
          onSelectCategory={setSelectedCategory} 
        />
        <div className="product-list__search-sort">
          <input 
            type="text" 
            placeholder="Buscar productos..." 
            value={searchQuery} 
            onChange={e => setSearchQuery(e.target.value)} 
          />
          <select value={sortOption} onChange={e => setSortOption(e.target.value)}>
            <option value="default">Ordenar por</option>
            <option value="priceAsc">Precio: menor a mayor</option>
            <option value="priceDesc">Precio: mayor a menor</option>
            <option value="nameAsc">Nombre: A-Z</option>
            <option value="nameDesc">Nombre: Z-A</option>
          </select>
        </div>
      </div>
      <div className="product-list__grid">
        {filteredProducts.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default ProductList;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/ZoomImage.tsx

Contenido:
// src/components/ZoomImage.tsx
import React, { useState, useRef } from 'react';

interface ZoomImageProps {
  src: string;
  alt?: string;
  width?: number;   // Ancho del contenedor en px (por defecto: 300)
  height?: number;  // Alto del contenedor en px (por defecto: 300)
  zoomLevel?: number; // Factor de zoom (por defecto: 2)
}

const ZoomImage: React.FC<ZoomImageProps> = ({
  src,
  alt = '',
  width = 300,
  height = 300,
  zoomLevel = 2,
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [lensStyle, setLensStyle] = useState<{ display: string; left: number; top: number }>({
    display: 'none',
    left: 0,
    top: 0,
  });
  const [backgroundPosition, setBackgroundPosition] = useState('0% 0%');

  const lensSize = 100; // Tamaño de la lupa (en px)

  const handleMouseMove = (e: React.MouseEvent) => {
    const container = containerRef.current;
    if (!container) return;

    const rect = container.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    // Calcula la posición de la lupa centrada en el cursor
    let lensX = x - lensSize / 2;
    let lensY = y - lensSize / 2;

    // Evita que la lupa se salga del contenedor
    if (lensX < 0) lensX = 0;
    if (lensY < 0) lensY = 0;
    if (lensX > rect.width - lensSize) lensX = rect.width - lensSize;
    if (lensY > rect.height - lensSize) lensY = rect.height - lensSize;

    // Calcula la posición de fondo para la lupa (en porcentaje)
    const bgPosX = (x / rect.width) * 100;
    const bgPosY = (y / rect.height) * 100;

    setBackgroundPosition(`${bgPosX}% ${bgPosY}%`);
    setLensStyle({ display: 'block', left: lensX, top: lensY });
  };

  const handleMouseEnter = () => {
    setLensStyle(prev => ({ ...prev, display: 'block' }));
  };

  const handleMouseLeave = () => {
    setLensStyle(prev => ({ ...prev, display: 'none' }));
  };

  return (
    <div
      className="zoom-image-container"
      ref={containerRef}
      style={{
        width: `${width}px`,
        height: `${height}px`,
        position: 'relative',
        overflow: 'hidden',
      }}
      onMouseMove={handleMouseMove}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {/* Imagen base */}
      <img
        src={src}
        alt={alt}
        style={{
          width: '100%',
          height: '100%',
          objectFit: 'cover',
        }}
      />
      {/* Lupa o zoom */}
      <div
        className="zoom-lens"
        style={{
          display: lensStyle.display,
          position: 'absolute',
          left: lensStyle.left,
          top: lensStyle.top,
          width: `${lensSize}px`,
          height: `${lensSize}px`,
          borderRadius: '50%',
          border: '2px solid var(--accent-color)',
          backgroundImage: `url(${src})`,
          backgroundRepeat: 'no-repeat',
          backgroundSize: `${width * zoomLevel}px ${height * zoomLevel}px`,
          backgroundPosition: backgroundPosition,
          pointerEvents: 'none',
          boxShadow: '0 4px 8px rgba(0,0,0,0.3)',
        }}
      />
    </div>
  );
};

export default ZoomImage;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/FullZoomImage.tsx

Contenido:
// src/components/FullZoomImage.tsx
import React, { useState, useRef, useEffect } from 'react';

interface FullZoomImageProps {
  src: string;
  alt?: string;
  thumbnailWidth?: number;  // Ancho del thumbnail (por defecto: 300px)
  thumbnailHeight?: number; // Alto del thumbnail (por defecto: 300px)
}

const FullZoomImage: React.FC<FullZoomImageProps> = ({
  src,
  alt = '',
  thumbnailWidth = 300,
  thumbnailHeight = 300,
}) => {
  const [hovered, setHovered] = useState(false);
  const [naturalSize, setNaturalSize] = useState<{ width: number; height: number }>({ width: 0, height: 0 });
  const containerRef = useRef<HTMLDivElement>(null);

  // Obtiene las dimensiones naturales de la imagen
  useEffect(() => {
    const img = new Image();
    img.src = src;
    img.onload = () => {
      setNaturalSize({ width: img.naturalWidth, height: img.naturalHeight });
    };
  }, [src]);

  return (
    <div
      className="full-zoom-image-container"
      ref={containerRef}
      style={{
        position: 'relative',
        width: `${thumbnailWidth}px`,
        height: `${thumbnailHeight}px`,
        overflow: 'visible', // Permite que el overlay se muestre fuera del contenedor
        cursor: 'zoom-in',
      }}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      {/* Imagen en tamaño reducido */}
      <img
        src={src}
        alt={alt}
        style={{
          width: '100%',
          height: '100%',
          objectFit: 'cover',
          display: 'block',
        }}
      />
      {/* Overlay que muestra la imagen en tamaño original */}
      {hovered && (
        <div
          className="full-zoom-overlay"
          style={{
            position: 'absolute',
            top: 0,
            left: '10%', // Se posiciona a la derecha del thumbnail
            zIndex: 999,
            border: '2px solid var(--accent-color)',
            backgroundColor: '#fff',
            boxShadow: '0 4px 8px rgba(0,0,0,0.3)',
            maxWidth: '90vw',
            maxHeight: '90vh',
            overflow: 'auto',
            marginLeft: '1rem',
          }}
        >
          <img
            src={src}
            alt={alt}
            style={{
              width: naturalSize.width,
              height: naturalSize.height,
              display: 'block',
            }}
          />
        </div>
      )}
    </div>
  );
};

export default FullZoomImage;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/ImageCarousel.tsx

Contenido:
import React, { useState, useEffect } from 'react';

interface ImageCarouselProps {
  images: string[];
}

const ImageCarousel: React.FC<ImageCarouselProps> = ({ images }) => {
  if (!images || images.length === 0) {
    return <div className="image-carousel__empty">No hay imágenes disponibles</div>;
  }

  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  // Cambiar imagen cada 3 segundos
  useEffect(() => {
    const intervalId = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 3000);

    return () => clearInterval(intervalId); // Limpiar intervalo al desmontar el componente
  }, [images.length]);

  return (
    <div className="image-carousel">
      <div className="image-carousel__wrapper">
        <img
          src={images[currentImageIndex]}
          alt={`Hero Image ${currentImageIndex + 1}`}
          className="image-carousel__image"
        />
      </div>
      <div className="image-carousel__indicators">
        {images.map((_, index) => (
          <span
            key={index}
            className={`indicator ${index === currentImageIndex ? 'active' : ''}`}
            onClick={() => setCurrentImageIndex(index)}
          ></span>
        ))}
      </div>
    </div>
  );
};

export default ImageCarousel;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/ThemeToggle.tsx

Contenido:
// src/components/ThemeToggle.tsx
import React, { useEffect, useState } from 'react';
import '../scss/components/_themeToggle.scss'; // Importa los estilos de SCSS

const ThemeToggle: React.FC = () => {
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    console.log('darkMode:', darkMode);
    const root = document.documentElement;
    if (darkMode) {
      root.classList.add('theme-dark');
    } else {
      root.classList.remove('theme-dark');
    }
  }, [darkMode]);
  
  return (
    <button
      className="theme-toggle"
      onClick={() => setDarkMode(!darkMode)}
    >
      {/* Puedes usar emojis, íconos, o texto */}
      {darkMode ? '☀️' : '🌙'}
    </button>
  );
};

export default ThemeToggle;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/Cart.tsx

Contenido:
import React, { useContext } from 'react';
import { Link } from 'react-router-dom';
import { CartContext } from '../context/CartContext';
import { motion } from 'framer-motion';

const Cart: React.FC = () => {
  const { cartItems, removeFromCart, updateCartItem, clearCart } = useContext(CartContext);

  const subtotal = cartItems.reduce(
    (sum, item) => sum + item.product.price * item.quantity,
    0
  );

  const handleQuantityChange = (productId: number, size: string, newQuantity: number) => {
    if (newQuantity < 1) {
      removeFromCart(productId, size);
    } else {
      updateCartItem(productId, size, newQuantity);
    }
  };

  // Función para formatear el precio con el signo de pesos y separadores de miles
  const formatPrice = (price: number) => {
    return `$${price.toLocaleString('es-AR')}`; // Utiliza 'es-AR' para formato con separadores de miles
  };

  return (
    <div className="cart">
      <motion.h2 
        className="cart__title"
        initial={{ opacity: 0 }} 
        animate={{ opacity: 1 }} 
        transition={{ duration: 0.5 }}
      >
        Carrito
      </motion.h2>

      {cartItems.length === 0 ? (
        <p className="cart__empty-message">No hay productos en el carrito.</p>
      ) : (
        <div className="cart__content">
          <div className="cart__items">
            {cartItems.map(item => (
              <div className="cart__item" key={`${item.product.id}-${item.size}`}>
                <img
                  src={item.product.images[0]}
                  alt={item.product.name}
                  className="cart__item-image"
                />
                <div className="cart__item-info">
                  <h3>{item.product.name}</h3>
                  <p>Talle: {item.size}</p>
                  <p>Precio: {formatPrice(item.product.price)}</p> {/* Usamos la función para formatear el precio */}
                  <div className="cart__quantity">
                    <input
                      type="number"
                      value={item.quantity}
                      min="1"
                      onChange={(e) =>
                        handleQuantityChange(
                          item.product.id,
                          item.size,
                          parseInt(e.target.value)
                        )
                      }
                    />
                    <button
                      onClick={() => removeFromCart(item.product.id, item.size)}
                      className="btn cart__remove-button"
                    >
                      Eliminar
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="cart__summary">
            <h3>Resumen</h3>
            <p className="cart__subtotal">Subtotal: {formatPrice(subtotal)}</p> {/* Formateamos el subtotal */}
            <div className="cart__actions">
              <button
                onClick={clearCart}
                className="btn cart__clear-button"
              >
                Vaciar
              </button>
              <Link to="/checkout" className="btn cart__checkout-button">
                Checkout
              </Link>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cart;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/Head.tsx

Contenido:
// src/components/Head.tsx

// Agrega esta línea al inicio del archivo
declare module 'react-helmet';

import React from 'react';
import { Helmet } from 'react-helmet';

const Head: React.FC = () => (
  <Helmet>
    <title>Grappling Gear</title>
    <meta name="description" content="Compra el mejor equipamiento para grappling." />
    <meta name="robots" content="index, follow" />
  </Helmet>
);

export default Head;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/Header.tsx

Contenido:
// src/components/Header.tsx
import React, { useContext, useState } from 'react';
import { Link } from 'react-router-dom';
import { CartContext } from '../context/CartContext';
import '../scss/components/_header.scss';

const Header: React.FC = () => {
  const { cartItems } = useContext(CartContext);
  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const toggleMobileMenu = () => setIsMobileMenuOpen(prev => !prev);

  return (
    <header className="header">
      <div className="header__logo">
        <Link to="/">Grappling Gear</Link>
      </div>

      {/* Menú para pantallas de escritorio */}
      <nav className="header__nav desktop">
        <Link to="/productos">Productos</Link>
        <Link to="/contactanos">Contáctanos</Link>
        <Link to="/carrito" className="header__cart">
          Carrito
          {totalItems > 0 && (
            <span className="header__cart-badge">{totalItems}</span>
          )}
        </Link>
      </nav>

      {/* Botón menú hamburguesa para tablet y móvil */}
      <div className="header__mobile-menu">
        <button 
          onClick={toggleMobileMenu} 
          className="mobile-menu__toggle" 
          aria-label="Abrir menú de navegación"
        >
          <span className="mobile-menu__bar"></span>
          <span className="mobile-menu__bar"></span>
          <span className="mobile-menu__bar"></span>
        </button>
      </div>

      {/* Overlay del menú móvil */}
      {isMobileMenuOpen && (
        <div className="mobile-menu__overlay" onClick={toggleMobileMenu}>
          <div 
            className="mobile-menu__content" 
            onClick={(e) => e.stopPropagation()}
          >
            <button 
              className="mobile-menu__close" 
              onClick={toggleMobileMenu} 
              aria-label="Cerrar menú de navegación"
            >
              &times;
            </button>
            <nav className="mobile-menu__nav">
              <Link to="/productos" onClick={toggleMobileMenu}>Productos</Link>
              <Link to="/contactanos" onClick={toggleMobileMenu}>Contáctanos</Link>
              <Link to="/carrito" onClick={toggleMobileMenu} className="mobile-cart">
                Carrito
                {totalItems > 0 && (
                  <span className="header__cart-badge">{totalItems}</span>
                )}
              </Link>
            </nav>
          </div>
        </div>
      )}
    </header>
  );
};

export default Header;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/Footer.tsx

Contenido:
// Footer.tsx
import React from 'react';
import '../scss/components/_footer.scss';

const Footer: React.FC = () => {
  return (
    <footer className="footer">
      <p>© {new Date().getFullYear()} Grappling Gear. Todos los derechos reservados.</p>
    </footer>
  );
};

export default Footer;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/ProductCard.tsx

Contenido:
import React, { memo } from 'react';
import { Link } from 'react-router-dom';
import { Product } from '../types/product';

const ProductCard: React.FC<{ product: Product }> = memo(({ product }) => {
  const formatPrice = (price: number) => {
    return `$${price.toLocaleString('es-AR')}`;
  };

  return (
    <div className="product-card">
      <Link to={`/producto/${product.id}`} className="product-card__link">
        <div className="product-card__image-container">
          <img
            src={product.images[0]}
            alt={product.name}
            className="product-card__image"
            loading="lazy" // Optimización de carga perezosa
          />
          <div className="product-card__overlay">
            <span className="product-card__quick-view">Ver Detalle</span>
          </div>
        </div>
      </Link>
      <div className="product-card__info">
        <h3 className="product-card__title">{product.name}</h3>
        <p className="product-card__description">
          {product.description.substring(0, 70)}...
        </p>
        <div className="product-card__price">{formatPrice(product.price)}</div>
      </div>
    </div>
  );
});

export default ProductCard;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/Hero.tsx

Contenido:
import React from 'react';
import ImageCarousel from './ImageCarousel';

interface HeroProps {
  images: string[];
}

const Hero: React.FC<HeroProps> = ({ images }) => {
  return (
    <section className="hero">
      <div className="hero__background">
        <ImageCarousel images={images} />
      </div>
      <div className="hero__content">
        <h1 className="hero__title">Innovación en Grappling</h1>
{/*         <p className="hero__subtitle">Equipamiento premium para el guerrero moderno</p>
 */}        <a href="productos" className="hero__cta">Explora ahora</a>
      </div>
    </section>
  );
};

export default Hero;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/NotificationContainer.tsx

Contenido:
// src/components/NotificationContainer.tsx
import React from 'react';
import ReactDOM from 'react-dom';
import { useNotification } from '../context/NotificationContext';
import '../scss/components/_notifications.scss';

const NotificationContainer: React.FC = () => {
  const { notifications } = useNotification();

  return ReactDOM.createPortal(
    <div className="notification-container">
      {notifications.map(notif => (
        <div key={notif.id} className={`notification ${notif.type}`}>
          {notif.message}
        </div>
      ))}
    </div>,
    document.body
  );
};

export default NotificationContainer;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/ProductGrid.tsx

Contenido:
// src/components/ProductGrid.tsx
import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import ProductCard from './ProductCard';
import { useSelector, useDispatch } from 'react-redux';
import productsData from './products.json'; // Importamos los productos iniciales
import { Product } from '../types/product';
import { loadProducts } from '../store'; // Acción para cargar productos

const ProductGrid: React.FC = () => {
  const dispatch = useDispatch();
  const [isVisible, setIsVisible] = useState(true);

  // Acceder a los productos desde el estado global
  const products: Product[] = useSelector((state: any) => state.products.products || []);

  // Filtrar los productos que tienen landing: true
  const filteredProducts = products.filter((product) => product.landing);

  // Si el estado de productos está vacío, inicializamos con los productos desde el archivo JSON
  useEffect(() => {
    if (products.length === 0) {
      dispatch(loadProducts(productsData.products)); // Disparar la acción para cargar productos
    }

    // Agregar el event listener para el scroll
    const handleScroll = () => {
      if (window.scrollY > 100) {
        setIsVisible(false);
      } else {
        setIsVisible(true);
      }
    };
    window.addEventListener('scroll', handleScroll);

    // Limpiar el event listener cuando el componente se desmonte
    return () => window.removeEventListener('scroll', handleScroll);
  }, [dispatch, products.length]);

  if (!filteredProducts || filteredProducts.length === 0) {
    return <div>Cargando productos...</div>;
  }

  return (
    <>
      {/* Flecha animada centrada en la pantalla */}
      {isVisible && (
        <motion.div
          className="scroll-arrow"
          animate={{ y: [0, 10, 0] }}
          transition={{ repeat: Infinity, duration: 1, ease: 'easeInOut' }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="30" height="30">
            <path fill="none" d="M0 0h24v24H0z" />
            <path d="M12 21l-8-8h5V3h6v10h5z" />
          </svg>
        </motion.div>
      )}

      <motion.section
        id="nuestra-coleccion"
        className="product-grid-creative"
        initial={{ opacity: 0, y: 50 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true, amount: 0.1 }}
        transition={{ duration: 0.8, ease: 'easeOut' }}
      >
        <div className="collection-intro">
          <h2>Nuevos arribos</h2>
          <p>
            Descubre la fusión perfecta entre tecnología y pasión por el grappling.
          </p>
        </div>
        <div className="product-grid-creative__list">
          {filteredProducts.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>
      </motion.section>
    </>
  );
};

export default ProductGrid;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/components/Checkout.tsx

Contenido:
import React, { useState } from 'react';

const Checkout: React.FC = () => {
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    address: '',
    city: '',
    zip: '',
    country: '',
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Aquí se implementaría la lógica de envío del pedido
    console.log('Datos de Checkout:', formData);
  };

  return (
    <div className="checkout">
      <h2>Checkout</h2>
      <form className="checkout__form" onSubmit={handleSubmit}>
        <div className="checkout__group">
          <label htmlFor="fullName">Nombre Completo</label>
          <input
            type="text"
            id="fullName"
            name="fullName"
            value={formData.fullName}
            onChange={handleChange}
            required
          />
        </div>
        <div className="checkout__group">
          <label htmlFor="email">Correo Electrónico</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        <div className="checkout__group">
          <label htmlFor="address">Dirección</label>
          <input
            type="text"
            id="address"
            name="address"
            value={formData.address}
            onChange={handleChange}
            required
          />
        </div>
        <div className="checkout__group">
          <label htmlFor="city">Ciudad</label>
          <input
            type="text"
            id="city"
            name="city"
            value={formData.city}
            onChange={handleChange}
            required
          />
        </div>
        <div className="checkout__group">
          <label htmlFor="zip">Código Postal</label>
          <input
            type="text"
            id="zip"
            name="zip"
            value={formData.zip}
            onChange={handleChange}
            required
          />
        </div>
        <div className="checkout__group">
          <label htmlFor="country">País</label>
          <select
            id="country"
            name="country"
            value={formData.country}
            onChange={handleChange}
            required
          >
            <option value="AR">Argentina</option>
            <option value="US">Estados Unidos</option>
            <option value="ES">España</option>
          </select>
        </div>
        <button type="submit" className="btn checkout__submit">
          Realizar Pedido
        </button>
      </form>
    </div>
  );
};

export default Checkout;


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/context/CartContext.tsx

Contenido:
import { createContext, useState, ReactNode } from 'react';
import { Product } from '../types/product';

export interface CartItem {
  product: Product;
  quantity: number;
  size: string;
}

interface CartContextType {
  cartItems: CartItem[];
  addToCart: (item: CartItem) => void;
  removeFromCart: (productId: number, size: string) => void;
  updateCartItem: (productId: number, size: string, newQuantity: number) => void;
  clearCart: () => void;
}

export const CartContext = createContext<CartContextType>({
  cartItems: [], // Asegúrate de inicializar como un arreglo vacío
  addToCart: () => {},
  removeFromCart: () => {},
  updateCartItem: () => {},
  clearCart: () => {},
});

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);

  const addToCart = (item: CartItem) => {
    setCartItems(prevItems => {
      const index = prevItems.findIndex(
        ci => ci.product.id === item.product.id && ci.size === item.size
      );
      if (index !== -1) {
        const newItems = [...prevItems];
        newItems[index].quantity += item.quantity;
        return newItems;
      }
      return [...prevItems, item];
    });
  };

  const removeFromCart = (productId: number, size: string) => {
    setCartItems(prevItems =>
      prevItems.filter(item => !(item.product.id === productId && item.size === size))
    );
  };

  const updateCartItem = (productId: number, size: string, newQuantity: number) => {
    setCartItems(prevItems =>
      prevItems.map(item => {
        if (item.product.id === productId && item.size === size) {
          return { ...item, quantity: newQuantity };
        }
        return item;
      })
    );
  };

  const clearCart = () => {
    setCartItems([]);
  };

  return (
    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, updateCartItem, clearCart }}>
      {children}
    </CartContext.Provider>
  );
};


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/context/NotificationContext.tsx

Contenido:
// src/context/NotificationContext.tsx
import { createContext, useContext, useState, ReactNode } from 'react';
import { v4 as uuidv4 } from 'uuid';

export type NotificationType = 'success' | 'error' | 'info';

export interface Notification {
  id: string;
  type: NotificationType;
  message: string;
}

interface NotificationContextType {
  notifications: Notification[];
  showNotification: (message: string, type?: NotificationType) => void;
  removeNotification: (id: string) => void;
}

export const NotificationContext = createContext<NotificationContextType>({
  notifications: [],
  showNotification: () => {},
  removeNotification: () => {},
});

export const NotificationProvider = ({ children }: { children: ReactNode }) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const showNotification = (message: string, type: NotificationType = 'info') => {
    const id = uuidv4();
    setNotifications(prev => [...prev, { id, message, type }]);
    // Elimina la notificación después de 3 segundos
    setTimeout(() => removeNotification(id), 3000);
  };

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(notif => notif.id !== id));
  };

  return (
    <NotificationContext.Provider value={{ notifications, showNotification, removeNotification }}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => useContext(NotificationContext);


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/context/InventoryContext.tsx

Contenido:
// src/context/InventoryContext.tsx
import { createContext, useState, ReactNode } from 'react';
import productsData from '../components/products.json';

interface Inventory {
  [productId: number]: Partial<Record<string, number>>;
}

interface InventoryContextType {
  inventory: Inventory;
  checkStock: (productId: number, size: string) => number;
  reduceStock: (productId: number, size: string, quantity: number) => boolean;
}

export const InventoryContext = createContext<InventoryContextType>({
  inventory: {},
  checkStock: () => 0,
  reduceStock: () => false,
});

export const InventoryProvider = ({ children }: { children: ReactNode }) => {
  const initialInventory: Inventory = {};
  productsData.products.forEach(product => {
    initialInventory[product.id] = product.stockBySize;
  });
  const [inventory, setInventory] = useState<Inventory>(initialInventory);

  const checkStock = (productId: number, size: string): number => {
    return inventory[productId] ? inventory[productId][size] || 0 : 0;
  };

  const reduceStock = (productId: number, size: string, quantity: number): boolean => {
    const currentStock = checkStock(productId, size);
    if (currentStock >= quantity) {
      setInventory(prev => ({
        ...prev,
        [productId]: {
          ...prev[productId],
          [size]: (prev[productId][size] || 0) - quantity,
        },
      }));
      return true;
    }
    return false;
  };

  return (
    <InventoryContext.Provider value={{ inventory, checkStock, reduceStock }}>
      {children}
    </InventoryContext.Provider>
  );
};


--------------------------------------------------------------------------------

/home/southatoms/Escritorio/develop/personal/grappling-gear/src/types/product.d.ts

Contenido:
// src/types/product.ts

export interface Product {
  id: number;
  name: string;
  category: string;                // Propiedad agregada para la categoría
  description: string;
  price: number;
  images: string[];
  availableSizes: string[];        // Propiedad agregada para los talles disponibles
  stockBySize: Partial<Record<string, number>>; // Permite que algunas claves (como "XL") puedan faltar
  new: boolean;
  landing: boolean;
}


--------------------------------------------------------------------------------

